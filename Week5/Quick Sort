{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    快速排序(Quick Sort)作法：\n",
    "    選定一個基準值(Pivot)\n",
    "        >>將比基準值(Pivot)小的數值移到基準值左邊，形成左子串列\n",
    "        >>將比基準值(Pivot)大的數值移到基準值右邊，形成右子串列\n",
    "        >>分別對左子串列、右子串列作上述三個步驟 ⇒ 遞迴(Recursive)\n",
    "    直到左子串列或右子串列只剩一個數值或沒有數值"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    邏輯方法思考:\n",
    "    1.先將基準值設為該陣列的中位數\n",
    "    2.所有陣列中的數字與基準值做比較\n",
    "    3.比較大的移動到基準值的右邊\n",
    "    4.比較小的移動到基準值的左邊\n",
    "    5.比基準值大的和小的都各重複1~4步驟\n",
    "    6.直到所有子串列都只剩一個數字，結果為已排序後的陣列\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#先讀看看別人的做法，思考可以如何減少處理時間\n",
    "\n",
    "def quicksort(x):\n",
    "    if len(x) == 1 or len(x) == 0:     #list中若長度為 0 或 1，直接回傳list\n",
    "        return x\n",
    "    else:\n",
    "        pivot = x[0]                   #起始值為第一項\n",
    "        i = 0\n",
    "        for j in range(len(x)-1):      #用基準點去跟陣列的其他數字做比較，所以只需要跑陣列長度-1次\n",
    "            if x[j+1] < pivot:         #因為是以第一項為基準值，所以從第二項開始比較\n",
    "                x[j+1],x[i+1] = x[i+1], x[j+1]     #如果比基準值小，就與基準值換位置(放到左邊)\n",
    "                i += 1\n",
    "        x[0],x[i] = x[i],x[0]\n",
    "        first_part = quicksort(x[:i])\n",
    "        second_part = quicksort(x[i+1:])\n",
    "        first_part.append(x[i])\n",
    "        return first_part + second_part #把基準值兩邊的數字合併\n",
    "    \n",
    "import random \n",
    "alist = []\n",
    "for i in range(1,random.randint(1,9)):\n",
    "    alist.append(random.randint(1,100))   #隨機變數創造陣列\n",
    "print(alist)   \n",
    "print(quicksort(alist))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
